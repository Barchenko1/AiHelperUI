name: Build & Deploy React to EC2

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_USER: ec2-user
      DEPLOY_PATH: /var/www/react-app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js (npmjs registry)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      # --- Force auth to npmjs & make npm ALWAYS send the token to npmjs ---
      - name: Configure npm auth for npmjs
        run: |
          echo "always-auth=true" >> ~/.npmrc
          # Important: do not quote the env var expansion below (prevents literal ${...})
          echo //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN} >> ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # --- Diagnostics: show which registry is active & any project .npmrc that might override it ---
      - name: Diagnostics - show npm registries
        run: |
          echo "-> npm default registry:"
          npm config get registry
          echo "-> Project .npmrc (if present):"
          if [ -f .npmrc ]; then sed -n '1,120p' .npmrc; else echo "(no project .npmrc)"; fi
          echo "-> List scoped deps (may use different registries):"
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json','utf8'));
            const deps = Object.assign({}, pkg.dependencies, pkg.devDependencies, pkg.optionalDependencies);
            const scopes = [...new Set(Object.keys(deps||{}).filter(n=>n.startsWith('@')).map(n=>n.split('/')[0]))];
            console.log(scopes.length?('Scopes: '+scopes.join(', ')):'(no scoped deps)');
          "

      # --- Install with verbose to capture the exact failing host (if any) ---
      - name: Install deps (verbose)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm ci --verbose || (echo "npm ci failed with code $?" && exit 1)

      # Upload npm logs so you can open them and see which registry returned 401
      - name: Upload npm logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-logs
          path: |
            ~/.npm/_logs/*.log
            .npm/_logs/*.log
          if-no-files-found: ignore

      - name: Build
        env:
          CI: "false"
        run: npm run build

      - name: Configure SSH
        run: |
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Create release dir on server
        run: |
          TS=$(date +%Y%m%d%H%M%S)
          echo "RELEASE=$TS" >> $GITHUB_ENV
          ssh -i ~/.ssh/id_rsa $EC2_USER@${{ secrets.DEPLOY_HOST }} "mkdir -p $DEPLOY_PATH/releases/$TS"

      - name: Rsync build to server
        run: |
          rsync -az --delete -e "ssh -i ~/.ssh/id_rsa" \
            build/ $EC2_USER@${{ secrets.DEPLOY_HOST }}:$DEPLOY_PATH/releases/${{ env.RELEASE }}/

      - name: Activate release (symlink + nginx reload)
        run: |
          ssh -i ~/.ssh/id_rsa $EC2_USER@${{ secrets.DEPLOY_HOST }} "\
            ln -sfn $DEPLOY_PATH/releases/${{ env.RELEASE }} $DEPLOY_PATH/current && \
            if command -v nginx >/dev/null 2>&1; then \
              sudo nginx -t && sudo systemctl reload nginx || sudo systemctl restart nginx; \
            fi \
          "

      - name: Cleanup old releases (keep last 5)
        run: |
          ssh -i ~/.ssh/id_rsa $EC2_USER@${{ secrets.DEPLOY_HOST }} "\
            ls -1dt $DEPLOY_PATH/releases/* | tail -n +6 | xargs -r rm -rf \
          "
